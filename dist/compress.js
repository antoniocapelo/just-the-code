'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = compress;
var fs = require('fs-extra');
var path = require('path');
var archiver = require('archiver');
var util = require('./util');

/**
 * Compresses the temporary folder into a [name].zip file.
 *
 * @param {String} name - desired compressed file name.
 * @param {Object} [data] - Planify passed data.
 * @param {Function} done - Planify 'done' callback.
 *
 */
function compress(name, data, done) {
    var srcFolder = util.buildTempFolderName(name);
    var destinyZip = path.resolve(name + '.zip');
    var output = fs.createWriteStream(destinyZip);
    var archive = archiver('zip');

    output.on('close', function () {
        process.stdout.write(archive.pointer() + ' total bytes archived');
        done();
    });

    archive.on('error', function (err) {
        throw err;
    });

    archive.pipe(output);
    archive.directory(path.resolve(srcFolder), '');
    archive.finalize();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wcmVzcy5qcyJdLCJuYW1lcyI6WyJjb21wcmVzcyIsImZzIiwicmVxdWlyZSIsInBhdGgiLCJhcmNoaXZlciIsInV0aWwiLCJuYW1lIiwiZGF0YSIsImRvbmUiLCJzcmNGb2xkZXIiLCJidWlsZFRlbXBGb2xkZXJOYW1lIiwiZGVzdGlueVppcCIsInJlc29sdmUiLCJvdXRwdXQiLCJjcmVhdGVXcml0ZVN0cmVhbSIsImFyY2hpdmUiLCJvbiIsInByb2Nlc3MiLCJzdGRvdXQiLCJ3cml0ZSIsInBvaW50ZXIiLCJlcnIiLCJwaXBlIiwiZGlyZWN0b3J5IiwiZmluYWxpemUiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQWF3QkEsUTtBQWJ4QixJQUFNQyxLQUFLQyxRQUFRLFVBQVIsQ0FBWDtBQUNBLElBQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiO0FBQ0EsSUFBTUUsV0FBV0YsUUFBUSxVQUFSLENBQWpCO0FBQ0EsSUFBTUcsT0FBT0gsUUFBUSxRQUFSLENBQWI7O0FBRUE7Ozs7Ozs7O0FBUWUsU0FBU0YsUUFBVCxDQUFrQk0sSUFBbEIsRUFBd0JDLElBQXhCLEVBQThCQyxJQUE5QixFQUFvQztBQUMvQyxRQUFNQyxZQUFZSixLQUFLSyxtQkFBTCxDQUF5QkosSUFBekIsQ0FBbEI7QUFDQSxRQUFNSyxhQUFhUixLQUFLUyxPQUFMLENBQWdCTixJQUFoQixVQUFuQjtBQUNBLFFBQU1PLFNBQVNaLEdBQUdhLGlCQUFILENBQXFCSCxVQUFyQixDQUFmO0FBQ0EsUUFBTUksVUFBVVgsU0FBUyxLQUFULENBQWhCOztBQUVBUyxXQUFPRyxFQUFQLENBQVUsT0FBVixFQUFtQixZQUFNO0FBQ3JCQyxnQkFBUUMsTUFBUixDQUFlQyxLQUFmLENBQXdCSixRQUFRSyxPQUFSLEVBQXhCO0FBQ0FaO0FBQ0gsS0FIRDs7QUFLQU8sWUFBUUMsRUFBUixDQUFXLE9BQVgsRUFBb0IsVUFBQ0ssR0FBRCxFQUFTO0FBQ3pCLGNBQU1BLEdBQU47QUFDSCxLQUZEOztBQUlBTixZQUFRTyxJQUFSLENBQWFULE1BQWI7QUFDQUUsWUFBUVEsU0FBUixDQUFrQnBCLEtBQUtTLE9BQUwsQ0FBYUgsU0FBYixDQUFsQixFQUEyQyxFQUEzQztBQUNBTSxZQUFRUyxRQUFSO0FBQ0giLCJmaWxlIjoiY29tcHJlc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzLWV4dHJhJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgYXJjaGl2ZXIgPSByZXF1aXJlKCdhcmNoaXZlcicpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vKipcbiAqIENvbXByZXNzZXMgdGhlIHRlbXBvcmFyeSBmb2xkZXIgaW50byBhIFtuYW1lXS56aXAgZmlsZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIGRlc2lyZWQgY29tcHJlc3NlZCBmaWxlIG5hbWUuXG4gKiBAcGFyYW0ge09iamVjdH0gW2RhdGFdIC0gUGxhbmlmeSBwYXNzZWQgZGF0YS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRvbmUgLSBQbGFuaWZ5ICdkb25lJyBjYWxsYmFjay5cbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXByZXNzKG5hbWUsIGRhdGEsIGRvbmUpIHtcbiAgICBjb25zdCBzcmNGb2xkZXIgPSB1dGlsLmJ1aWxkVGVtcEZvbGRlck5hbWUobmFtZSk7XG4gICAgY29uc3QgZGVzdGlueVppcCA9IHBhdGgucmVzb2x2ZShgJHtuYW1lfS56aXBgKTtcbiAgICBjb25zdCBvdXRwdXQgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShkZXN0aW55WmlwKTtcbiAgICBjb25zdCBhcmNoaXZlID0gYXJjaGl2ZXIoJ3ppcCcpO1xuXG4gICAgb3V0cHV0Lm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYCR7YXJjaGl2ZS5wb2ludGVyKCl9IHRvdGFsIGJ5dGVzIGFyY2hpdmVkYCk7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KTtcblxuICAgIGFyY2hpdmUub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG5cbiAgICBhcmNoaXZlLnBpcGUob3V0cHV0KTtcbiAgICBhcmNoaXZlLmRpcmVjdG9yeShwYXRoLnJlc29sdmUoc3JjRm9sZGVyKSwgJycpO1xuICAgIGFyY2hpdmUuZmluYWxpemUoKTtcbn1cblxuIl19